// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
 

model User {
  id         String     @id @default(cuid())
  name       String
  email      String     @unique
  role       String     @default("user") // admin, user, etc.
  hourlyRate Float      @default(0)      // User's default hourly rate
  timeLogs   TimeLog[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  projectTeamMembers ProjectTeamMember[]
}


model Client {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id             String        @id @default(cuid())
  name           String
  description    String?
  status         String        @default("Planning") // Planning, In Progress, Completed, On Hold
  startDate      DateTime
  endDate        DateTime?
  budget         Float         @default(0)
  hourlyRate     Float         @default(0)
  estimatedHours Float         @default(0)
  profitMargin   Float         @default(20) // Default 20% profit margin
  notes          String?
  client         Client        @relation(fields: [clientId], references: [id])
  clientId       String
  deliverables   Deliverable[]
  timeLogs       TimeLog[]
  tasks          Task[]
  expenses       ProjectExpense[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  teamMembers    ProjectTeamMember[]
}

model Deliverable {
  id        String   @id @default(cuid())
  name      String
  dueDate   DateTime
  hours     Float    @default(0)
  status    String   @default("Not Started") // Not Started, In Progress, Completed
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id              String    @id @default(cuid())
  title           String
  description     String?
  status          String    @default("notStarted") // notStarted, inProgress, completed
  priority        String    @default("medium") // low, medium, high
  dueDate         DateTime?
  percentComplete Float     @default(0)
  project         Project   @relation(fields: [projectId], references: [id])
  projectId       String
  timeLogs        TimeLog[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model TimeLog {
  id          String    @id @default(cuid())
  date        DateTime
  hours       Float
  description String?
  billable    Boolean   @default(true)
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  task        Task?     @relation(fields: [taskId], references: [id])
  taskId      String?
  startTime   String?
  endTime     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProjectTeamMember {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      String   // Role within the project
  hours     Float    // Hours allocated to the project
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId]) // Ensure a user is only added once to a project
}

model ProjectExpense {
  id          String   @id @default(cuid())
  name        String
  amount      Float
  type        String   // e.g., "Software", "Hardware", "Travel", "Other"
  description String?
  date        DateTime
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}