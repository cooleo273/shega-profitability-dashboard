generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String
  email              String              @unique
  role               String              @default("user")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  hourlyRate         Float               @default(0)
  hashedPassword     String?
  isFirstLogin       Boolean             @default(true)
  projectTeamMembers ProjectTeamMember[]
  timeLogs           TimeLog[]
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
}

model Project {
  id             String              @id @default(cuid())
  name           String
  description    String?
  status         String              @default("Planning")
  startDate      DateTime
  endDate        DateTime?
  budget         Float               @default(0)
  hourlyRate     Float               @default(0)
  estimatedHours Float               @default(0)
  notes          String?
  clientId       String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  profitMargin   Float               @default(20)
  deliverables   Deliverable[]
  client         Client              @relation(fields: [clientId], references: [id])
  expenses       ProjectExpense[]
  teamMembers    ProjectTeamMember[]
  tasks          Task[]
  timeLogs       TimeLog[]
}

model Deliverable {
  id          String   @id @default(cuid())
  name        String
  dueDate     DateTime
  hours       Float    @default(0)
  status      String   @default("Not Started")
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  project     Project  @relation(fields: [projectId], references: [id])
}

model Task {
  id              String    @id @default(cuid())
  title           String
  description     String?
  status          String    @default("notStarted")
  priority        String    @default("medium")
  dueDate         DateTime?
  percentComplete Float     @default(0)
  projectId       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  project         Project   @relation(fields: [projectId], references: [id])
  timeLogs        TimeLog[]
}

model TimeLog {
  id          String   @id @default(cuid())
  date        DateTime
  hours       Float
  description String?
  billable    Boolean  @default(true)
  userId      String
  projectId   String
  taskId      String?
  startTime   String?
  endTime     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model ProjectTeamMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String
  hours     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model ProjectExpense {
  id          String   @id @default(cuid())
  name        String
  amount      Float
  type        String
  description String?
  date        DateTime
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
}
